<!DOCTYPE html>
<html lang="<%= config.language %>">
    <%- partial('_partial/head') %>
    
    <body
        data-color-scheme="<%= theme.color_scheme %>"
        data-uppercase-categories="<%= theme.uppercase_categories %>"
        <% if (theme.rainbow_banner == true) { %>
        data-rainbow-banner="<%= theme.rainbow_banner %>"
        data-rainbow-banner-shown="<%= theme.rainbow_banner_shown %>"
        data-rainbow-banner-month="<%= theme.rainbow_banner_month %>"
        data-rainbow-banner-colors="<%= theme.rainbow_banner_colors %>"
        <% } %>
        data-config-root="<%- config.root %>"
        <% if (theme.toc == true) { %>
        data-toc="<%= theme.toc %>"
        data-toc-max-depth="<%= theme.toc_max_depth %>"
        <% } %>
        <% if (theme.search == true && page.type == 'search') { %>
        data-search-path="<%= theme.search_path %>"
        <% } %>
    >
        <%- partial('_partial/nav') %>
        <%- body %>
        <%- partial('_partial/footer') %>
        <script async src="https://umami.eurekac.cn/script.js" data-website-id="8be37a45-1387-4cd9-86ae-7fd3d33e8c29"></script>
        <script src="https://registry.npmmirror.com/@chenyfan/cache-db/0.0.4/files/index.js"></script>
        <script src='<%- theme.cdn_mirror %>js/main.js'></script>
        <% if (theme.search == true && page.type == 'search') { %>
        <script src='<%- theme.cdn_mirror %>js/search.js'></script>
        <% } %>
        <% if (config.tidio) { %> 
        <%- js(config.tidio) %> 
        <% } %>
        <% if (config.ackee) { %>
        <%- config.ackee %>
        <% } %>
        <script src="https://registry.npmmirror.com/pagemap/1.4.0/files/dist/pagemap.min.js"></script>
        <script src="https://registry.npmmirror.com/notyf/3.10.0/files/notyf.min.js"></script>
        <script>
            window.notyf = new Notyf({
                duration: 3000,
                position: {
                    x: 'right',
                    y: 'bottom'
                },
                ripple: true,
                dismissible: true
            });
            window.importJS = async (url) => {
                return new Promise((resolve, reject) => {
                    let script = document.createElement('script')
                    script.src = url
                    script.onload = () => {
                        resolve()
                    }
                    script.onerror = () => {
                        reject()
                    }
                    document.head.appendChild(script)
                })

            }
            window.importCSS = async (url) => {
                return new Promise((resolve, reject) => {
                    let link = document.createElement('link')
                    link.rel = 'stylesheet'
                    link.href = url
                    link.onload = () => {
                        resolve()
                    }
                    link.onerror = () => {
                        reject()
                    }
                    document.head.appendChild(link)
                })
            };
            (async () => {
                if (!!document.getElementById("Comments")){
                    const data = JSON.parse((await db.read("CommentSetting")) || JSON.stringify({
                    enable: true,
                    delay: 5
                }))
                if (data.enable) {
                    document.getElementById("comment_notice").innerText = "Comment Will Load After " + data.delay + "s"
                    setTimeout(() => {
                        const wait_comment_load = setInterval(async () => {
                            if (isElementVisible(document.getElementById("Comments"))) {
                                clearInterval(wait_comment_load)
                                document.getElementById("comment_notice").innerText = "Loading Comment Script..."
                                await loadJS("https://registry.npmmirror.com/artalk/2.8.2/files/dist/Artalk.js")
                                document.getElementById("comment_notice").innerText = "Loading Comment Style..."
                                await loadCSS("https://registry.npmmirror.com/artalk/2.8.2/files/dist/Artalk.css")
                                document.getElementById("comment_notice").innerText = "Loading Comment Frame..."
                                window.artalk = Artalk.init({
                                    el: '#Comments',
                                    pageKey: window.location.pathname,
                                    pageTitle: "",
                                    server: 'https://artalk.eurekac.cn',
                                    site: 'CyanFalseの幻想乡♂'
                                })
                                artalk.setDarkMode(window.darkMode)
                            }
                        }, 1000)
                    }, data.delay*1000)
                } else {
                    document.getElementById("comment_notice").innerText = "Comment Disabled by Your Config"
                }
                const isElementVisible = (el) => {
                    const rect = el.getBoundingClientRect()
                    const vWidth = window.innerWidth || document.documentElement.clientWidth
                    const vHeight = window.innerHeight || document.documentElement.clientHeight
                    if (
                        rect.right < 0 ||
                        rect.bottom < 0 ||
                        rect.left > vWidth ||
                        rect.top > vHeight
                    ) {
                        return false
                    }

                    return true
                }
                }
                if (!!document.querySelector('#map')) {
                    window.loadPageMap = (dark) => {
                        document.querySelector('#map').id = 'map-predelete'
                        let newMap = document.createElement('canvas')
                        newMap.id = 'map'
                        document.querySelector('#map-predelete').insertAdjacentElement('afterend', newMap)
                        document.querySelector('#map-predelete').remove()
                        let initColor = dark ? '255,255,255' : '0,0,0'
                        pagemap(document.querySelector('#map'), {
                            viewport: null,
                            styles: {
                                'header,footer,section,article': 'rgba(' + initColor + ',0.08)',
                                'h1': 'rgba(' + initColor + ',0.10)',
                                'h2,h3,h4': 'rgba(' + initColor + ',0.08)',
                                'pre': 'rgba(' + initColor + ',0.05)'
                            },
                            back: 'rgba(' + initColor + ',0.02)',
                            view: 'rgba(' + initColor + ',0.05)',
                            drag: 'rgba(' + initColor + ',0.10)',
                            interval: null
                        });
                        document.querySelector('#map').addEventListener('mouseover', () => {
                            document.querySelector('#map').classList.remove('fadeout')
                            document.querySelector('#map').classList.add('fadein')
                        });
                        document.querySelector('#map').addEventListener('mouseout', () => {
                            document.querySelector('#map').classList.remove('fadein')
                            document.querySelector('#map').classList.add('fadeout')
                        });
                        let map = document.querySelector('#map')
                        let mapTimeout = null
                        document.addEventListener('scroll', () => {
                            map.classList.remove('fadeout')
                            map.classList.add('fadein')
                            if (mapTimeout) clearTimeout(mapTimeout)
                            mapTimeout = setTimeout(() => {
                                map.classList.remove('fadein')
                                map.classList.add('fadeout')
                            }, 1000)
                        })
                    }
                    loadPageMap(window.darkMode, true)
                }

                window.db = new CacheDB('CyanAcc', "CyanAccDB")
                if (await db.read('needInstall') === 'never') {
                    console.log('CyanAcc已禁用')
                    return;
                }
                if ('serviceWorker' in navigator) {
                    if (await db.read('install_time') === null ||
                        new Date().getTime() > Number(await db.read('install_time')) + 1000 * 60 * 60 * 4) {
                        await db.write('install_time', new Date().getTime())
                        await db.write('needInstall', 'true')
                    }
                    if (await db.read('needInstall') === 'true') {
                        navigator.serviceWorker.register(`/CyanAcc.js?time=${new Date().getTime()}`)
                            .then(async reg => {
                                let error = 0
                                const CyanAcc_Checker = setInterval(() => {
                                    fetch('/CyanAcc/api', {
                                        method: 'POST',
                                        body: JSON.stringify({
                                            action: 'PING'
                                        })
                                    })
                                        .then(res => res.json())
                                        .then(async res => {
                                            if (res.data === "PONG") {
                                                notyf.success('CyanAcc安装/更新成功<br/>建议刷新以启用CyanAcc！')
                                                clearInterval(CyanAcc_Checker)
                                                await db.write('needInstall', 'false')
                                            }
                                        })
                                        .catch(err => {
                                            console.log(`CyanAcc检查失败，正在重试第${error}次`)
                                            error++
                                            if (error > 10) {
                                                notyf.error({
                                                    message: `CyanAcc安装后无成功响应！将不会再尝试安装！</br>正在卸载已安装的CyanAcc...</br>详细信息请查看控制台`,
                                                    duration: 10000
                                                })
                                                console.error(err)
                                                clearInterval(CyanAcc_Checker)
                                                db.write('needInstall', 'never')
                                                reg.unregister()
                                            }
                                        })
                                }, 1000);
                            }).catch(async err => {
                                notyf.error({
                                    message: `CyanAcc安装失败！</br>将不会再尝试启动CyanAcc</br>请点击右上角设置手动安装</br>详细信息请查看控制台`,
                                    duration: 10000
                                })
                                console.error(err)
                                await db.write('needInstall', 'never')
                            })
                    } else {
                        console.log('CyanAcc暂时无需更新，正在获取脚本与样式注入')
                        await importJS('/CyanAcc/custom.js?time=' + new Date().getTime())
                        console.log('CyanAcc脚本注入成功')
                        await importCSS('/CyanAcc/custom.css?time=' + new Date().getTime())
                        console.log('CyanAcc样式注入成功')
                    }
                } else {
                    if (location.protocol !== 'https:') notyf.error('请使用HTTPS协议以启用CyanAcc')
                    else {
                        notyf.error('您的浏览器不支持或被广告插件禁用ServiceWorker</br>已直接禁用CyanAcc')
                        await db.write('needInstall', 'never')
                    }
                }
            })();
        </script>
        
    </body>
</html>